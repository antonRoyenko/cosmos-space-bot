generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  wallets        Wallet[]
  telegramId     BigInt         @unique @map("telegram_id")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  notification    Notification    @relation(fields: [notificationId], references: [id])
  notificationId  Int
  Network        Network?       @relation(fields: [networkId], references: [id])
  networkId      Int?
  Alarm          Alarm?
  timezone       String         @default("Europe/London")

  @@map(name: "users")
}

model Notification {
  id                       Int       @id @default(autoincrement())
  reminderNetworks         Network[] @relation("reminder")
  governanceNetworks       Network[] @relation("governance")
  isReminderActive         Boolean   @default(false)
  User                     User[]
  notificationReminderTime  String[]

  @@map(name: "notifications")
}

model Alarm {
  id            Int            @id @default(autoincrement())
  alarmNetworks AlarmNetwork[]
  isAlarmActive Boolean        @default(false)
  User          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique

  @@map(name: "alarms")
}

model AlarmNetwork {
  id          Int      @id @default(autoincrement())
  alarmPrices String[]
  Network     Network? @relation(fields: [networkId], references: [id])
  networkId   Int      @unique
  Alarm       Alarm    @relation(fields: [alarmId], references: [id])
  alarmId     Int

  @@map(name: "alarm_networks")
}

model Wallet {
  id        Int     @id @default(autoincrement())
  wallet    String
  network   Network @relation(fields: [networkId], references: [id])
  networkId Int
  User      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique

  @@map(name: "wallets")
}

model Network {
  id                     Int            @id @default(autoincrement())
  name                   String         @unique
  fullName               String
  resource               Resource?      @relation(fields: [resourceId], references: [id])
  resourceId             Int            @unique
  user                   User[]
  publicUrl              String
  wsPublicUrl            String
  wallet                 Wallet[]
  AlarmNetwork           AlarmNetwork[]
  reminderNotification    Notification[] @relation("reminder")
  governanceNotification  Notification[] @relation("governance")

  @@map(name: "networks")
}

model Resource {
  id      Int       @id @default(autoincrement())
  site    String
  discord String
  twitter String
  youtube String?
  blog    String?
  github  String
  reddit  String?
  network Network[]

  @@map(name: "resources")
}
