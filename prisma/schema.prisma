generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  wallets        Wallet[]
  telegramId     BigInt       @unique @map("telegram_id")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  notification    Notification?
  Network        Network?     @relation(fields: [networkId], references: [id])
  networkId      Int?         @map("network_id")
  alarm          Alarm[]
  timezone       String       @default("Europe/London")

  @@map(name: "users")
}

model Notification {
  id                       Int                      @id @default(autoincrement())
  networks                 NetworksInNotification[]
  isReminderActive         Boolean                  @default(false) @map("is_reminder_active")
  isAlarmActive            Boolean                  @default(false) @map("is_alarm_active")
  notificationReminderTime  String[]                 @map("notification_reminder_time")
  user                     User                     @relation(fields: [userId], references: [id])
  userId                   Int                      @unique @map("user_id")

  @@map(name: "notifications")
}

model NetworksInNotification {
  id                  Int           @id @default(autoincrement())
  notification         Notification?  @relation(fields: [notificationId], references: [id])
  notificationId       Int?          @map("notification_id")
  reminderNetwork     Network?      @relation("reminder_networks", fields: [reminderNetworkId], references: [id])
  reminderNetworkId   Int?          @unique @map("reminder_network_id")
  governanceNetwork   Network?      @relation("governance_networks", fields: [governanceNetworkId], references: [id])
  governanceNetworkId Int?          @unique @map("governance_network_id")
  governanceTimeStart DateTime?     @map("governance_time_start")

  @@map(name: "networks_in_notification")
}

model Alarm {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique @map("user_id")
  alarmPrices String[] @map("alarm_prices")
  network     Network? @relation(fields: [networkId], references: [id])
  networkId   Int      @unique @map("network_id")

  @@map(name: "alarms")
}

model Wallet {
  id        Int     @id @default(autoincrement())
  address   String
  network   Network @relation(fields: [networkId], references: [id])
  networkId Int     @map("network_id")
  User      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique @map("user_id")

  @@map(name: "wallets")
}

model Network {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  fullName                String
  resource                Resource?               @relation(fields: [resourceId], references: [id])
  resourceId              Int                     @unique
  user                    User[]
  publicUrl               String
  wsPublicUrl             String
  wallet                  Wallet[]
  Alarm                   Alarm[]
  governanceNotifications  NetworksInNotification[] @relation("reminder_networks")
  reminderNotifications    NetworksInNotification[] @relation("governance_networks")

  @@map(name: "networks")
}

model Resource {
  id      Int       @id @default(autoincrement())
  site    String
  discord String
  twitter String
  youtube String?
  blog    String?
  github  String
  reddit  String?
  network Network[]

  @@map(name: "resources")
}
